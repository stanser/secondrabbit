// http://blog.codeship.io/2013/08/20/testing-tuesday-19-how-to-test-node-js-applications-with-jasmine.html

// node_modules\.bin\jasmine-node --verbose --junitreport --noColor .
// node_modules\.bin\jasmine-node --verbose .



var gen = require('./generator.js');

var times = 100;

describe(".random", function () {
  it("() :: 0 - 10", function () {
  	for (var i = 0; i < times; i++) {
  		var r = gen.random();
  		expect(r).toBeGreaterThan(0 - 1);
  		expect(r).toBeLessThan(10 + 1);
  	};
  });

  it("(max) :: 0 - max", function () {
  	var max = 500;
  	for (var i = 0; i < times; i++) {
  		var r = gen.random(max);
  		expect(r).toBeGreaterThan(0 - 1);
  		expect(r).toBeLessThan(max + 1);
  	};
  });

  it("(min, max) :: min - max", function () {
  	var min = 200;
  	var max = 500;
  	for (var i = 0; i < times; i++) {
  		var r = gen.random(min, max);
  		expect(r).toBeGreaterThan(min - 1);
  		expect(r).toBeLessThan(max + 1);
  	};
  });

  it("(array) :: ", function () {
  	var array = ["ad", 3, [], {}, 4, 0, "ggds"];
  	var prv = null;
  	for (var i = 0; i < times; i++) {
  		var r = gen.random(array);
  		expect(array.indexOf(r)).toBeGreaterThan(-1);
  		// expect(prv).not.toEqual(r);
  		prv = r;
  	};
  });

  it("(array, keyOnly) :: ", function () {
  	var array = ["ad", 3, [], {}, 4, 0, "ggds"];
  	var prv = null;
  	for (var i = 0; i < times; i++) {
  		var r = gen.random(array, true);
  		expect(array[r]).toBeDefined();
  		// expect(prv).not.toEqual(r);
  		prv = r;
  	};
  });

  it("(object) :: ", function () {
  	var object = {"ad": 3, cd: [], crt: {}, vv: 4, gh: 0, ovkfgn: "ggds"};
  	var prv = null;
  	for (var i = 0; i < times; i++) {
  		var r = gen.random(object);
  		expect(check(r)).toBe(true);

  		function check(val){
  			for(var key in object){
	  			if(object[key] === val){
	  				//console.log(key, object[key], val, (object[key] === val));
	  				return true
	  			}
  			}
  			return false;
  		}
  		// expect(prv).not.toEqual(r);
  		prv = r;
  	};
  });

  it("(object, keyOnly) :: ", function () {
  	var object = {"ad": 3, cd: [], crt: {}, vv: 4, gh: 0, ovkfgn: "ggds"};
  	var prv = null;
  	for (var i = 0; i < times; i++) {
  		var r = gen.random(object, true);
  		expect(object[r]).toBeDefined();
  		// expect(prv).not.toEqual(r);
  		prv = r;
  	};
  });
});


describe(".uuid", function () {
  it("()", function () {
  	for (var i = 0; i < times; i++) {
  		var r = gen.random();
  		expect(r).toBeGreaterThan(0-  1);
  		expect(r).toBeLessThan(10 + 1);
  	};
  });
});

describe(".uid", function () {
  it("()", function () {
  	for (var i = 0; i < times; i++) {
  		var r = gen.random();
  		expect(r).toBeGreaterThan(0-  1);
  		expect(r).toBeLessThan(10 + 1);
  	};
  });

  it("(legth)", function () {
  	for (var i = 0; i < times; i++) {
  		var r = gen.random();
  		expect(r).toBeGreaterThan(0-  1);
  		expect(r).toBeLessThan(10 + 1);
  	};
  });
});


describe(".duration", function () {
  it("()", function () {
  	for (var i = 0; i < times; i++) {
  		var r = gen.duration();
  		expect(r).toBeGreaterThan(0 - 1);
  		expect(r).toBeLessThan(30*60);
  	};
  });
});

describe(".cost", function () {
  it("()", function () {
  	for (var i = 0; i < times; i++) {
  		var r = gen.cost();
  		expect(r).toBeGreaterThan(0 - 1);
  		expect(r).toBeLessThan(100000 + 1);
  	};
  });
});

describe(".costToStr", function () {
  it("()", function () {
  	expect(gen.costToStr(1)).toEqual("0.00001");
  	expect(gen.costToStr(10)).toEqual("0.00010");
  	expect(gen.costToStr(100)).toEqual("0.00100");
  	expect(gen.costToStr(1000)).toEqual("0.01000");
  	expect(gen.costToStr(10000)).toEqual("0.10000");
  	expect(gen.costToStr(100000)).toEqual("1.00000");
  	expect(gen.costToStr(1000000)).toEqual("10.00000");
  	expect(gen.costToStr(10000000)).toEqual("100.00000");
  	expect(gen.costToStr(100000000)).toEqual("1000.00000");
  });
});

describe(".couchTimeStamp", function () {
  it("()", function () {
  	for (var i = 0; i < times; i++) {
  		var r = gen.random();
  		expect(r).toBeGreaterThan(0-  1);
  		expect(r).toBeLessThan(10 + 1);
  	};
  });
});

describe(".scriptName", function () {
  it("(__filename) :: 'generator-spec'", function () {
  	expect(gen.scriptName(__filename)).toEqual("generator-spec");
  	for (var i = 0; i < times; i++) {
  		var r = gen.random();
  		
  		expect(r).toBeLessThan(10 + 1);
  	};
  });
});